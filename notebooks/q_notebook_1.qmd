---
title: "kmeans exploration"
author: "Eva Viviani"
format: html
editor: visual
---

## Explore segregation of ethnicity via k-means

Load the dataset. I have made a slim version of the dataset which contains the variable of interest (i.e., ned vs n_ned) as suggested by Jochem.

```{r, echo=FALSE, message=FALSE}
rm(list = ls())

library(dplyr)
library(ggplot2)
library(sf)
```
```{r, eval=FALSE}
getwd()
load("../data/20230424raster.rda")
```

```{r}
dir <- "/Users/evaviviani/Library/CloudStorage/OneDrive-NetherlandseScienceCenter/polpol_tolsma/"

load(paste0(dir, '20230424raster.rda'))
```


```{r}
# make english-friendly
x$town_name <- stringr::str_replace_all(string = x$GM_NAAM, 
                                                 pattern = " ", repl = "")
x$town_name <- gsub(",", "_", x$town_name)

polpol <- cbind(x[, c(1, 114, 43:44)], st_coordinates(x[, 43:44]))
colnames(polpol)[1]<- 'grid_cell'

rm(x); gc()
```

Sneak peek of the dataset. `grid_cell` and `town_name` self explanatory. `ned` = proportion of dutch present in the grid, `n_ned` proportion of non-dutch present in the grid. `X` and `Y` coordinates of the grid.

```{r}
head(polpol)
hist(polpol$ned)
hist(polpol$n_ned)

summary(polpol$ned)
table(polpol$n_ned)
```

## Map of the coordinates

Get density of points in 2D

<!---we removed unpopulated grid cells--->


```{r}
get_density <- function(x, y, ...) {
  dens <- MASS::kde2d(x, y, ...)
  ix <- findInterval(x, dens$x)
  iy <- findInterval(y, dens$y)
  ii <- cbind(ix, iy)
  return(dens$z[ii])
}
```

```{r}
polpol$density <- get_density(polpol$X, polpol$Y, n = 100)
```

Plot points

```{r}
ggplot(data = polpol) +
  geom_point(aes(x = X, y = Y, colour = density), size = 0.01) +
  viridis::scale_color_viridis() +
  theme_void() 
```

`ned` and `n_ned` are essentially a single feature variable (i.e., `dutchness`). They are correlated as of course if the number of dutch increases, it will increase also the number of non-dutch, as it means that area they are living is bigger/densely populated. Let's check:

<!---not bigger, densely populated, yes there is correlation but not perfect because...SEGREGATION---> 


```{r}
ggplot(polpol, aes(x = ned, y = n_ned)) +
  geom_point()

```

The scales seem also a bit different. OK, let's collapse the information within `ned` and `n_ned` in a single variable, let's call it `delta.` This will be the proportion of dutch inhabitants over the total. Scores close to 1 will indicate prevalence of dutch, close to 0 to non-dutch.

<!---please do not do this. this way you are removing interesting information from our dataset
FYI there is quite some debate on whether you want to contruct segregation measures based on proportions or on numbers.---> 

```{r}
polpol$delta <- (polpol$ned - polpol$n_ned) / (polpol$ned + polpol$n_ned)
polpol$sum <- (polpol$ned + polpol$n_ned)
```

Let's apply K-means now. I hypothesise 3 clusters as being informative: dutch, non-dutch, and equal number of dutch/non-dutch.

```{r}
set.seed(1765445)
polpol_kmeans <- kmeans(polpol$delta, centers = 3, iter.max = 15)
polpol_kmeans2 <- kmeans(cbind(polpol$ned, polpol$n_ned), centers = 3, iter.max = 15)

```

`polpol_kmeans` object contains the cluster assignments, cluster centers, and other information about the result of the k-means algorithm. You can access these by typing `polpol_kmeans$cluster` and `polpol_kmeans$centers`

```{r}
polpol_kmeans$centers
polpol_kmeans2$centers
```

```{r}
head(polpol_kmeans$cluster)
```

Let's add the cluster labels to the dataset:

```{r}
polpol$km <- polpol_kmeans$cluster
polpol$km2 <- polpol_kmeans2$cluster
```

Plot the cluster labels obtained on `delta` over the ned/n_ned points

```{r, warning=FALSE}
ggplot(polpol, aes(x = log(ned), y = log(n_ned), colour = as.factor(km))) +
  geom_point(size = 2) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
  theme_minimal()

```

```{r, warning=FALSE}
ggplot(polpol, aes(x = log(ned), y = log(n_ned), colour = as.factor(km2))) +
  geom_point(size = 2) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
  theme_minimal()

```

mmm,....




Now let's plot the clustered labels on the X, Y coordinates:

```{r}
ggplot(data = polpol) +
  geom_point(aes(x = X, y = Y, colour = as.factor(km)), size = 0.01) +
  theme_void() 
```



So, 1 (pink) tells me that there is prevalence of dutch over non-dutch. 3 (blue) tells me the opposite, while 2 (green) tells me that there is an equivalent number of people dutch/non-dutch. Let's zoom in into a city to have a better visualisation:

```{r}
ggplot(data = polpol |> filter(town_name == "Utrecht")) +
  geom_point(aes(x = X, y = Y, colour = as.factor(km)), size = 0.8) +
  theme_void() 
```



```{r}
ggplot(data = polpol) +
  geom_point(aes(x = X, y = Y, colour = as.factor(km2)), size = 0.01) +
  theme_void() 
```

- green rural
- pink: heavily populated by dutch
- blue: heavily populated by non-dutch


```{r}
ggplot(data = polpol |> filter(town_name == "Utrecht")) +
  geom_point(aes(x = X, y = Y, colour = as.factor(km2)), size = 0.8) +
  theme_void() 
```



```{r}
neigh_homogeneity <- function(df, x_col, y_col, kmean_col, radius = 2000) {
  nh <- numeric(0)
  df$geom <- NULL # remove geom because otherwise it interferes with the X-Y selection column
  
for (i in 1:nrow(df)) {
  # Select the rows in the data frame that are within the specified radius
    nx <- abs(df[, x_col] - df[i, x_col]) <= radius
    ny <- abs(df[, y_col] - df[i, y_col]) <= radius
  # Subset the data frame to include only the rows within the specified radius
    n <- df[nx & ny, kmean_col]
  # Calculate the neighborhood homogeneity as the proportion of cluster labels
  # that match the label of the current point
    homogeneity <- sum(n == df[i, kmean_col]) / length(n)
  # append it to nh 
    nh <- c(nh, homogeneity)
  }
  
  return(nh)
}

```

```{r}
neigh_homogeneity <- neigh_homogeneity(df = polpol |> filter(town_name == "Amsterdam"), x_col = "X", y_col = "Y", kmean_col = "km", radius = 2000)
```

```{r}
amsterdam <- polpol |> filter(town_name == "Amsterdam")
amsterdam$neigh_homogeneity <- neigh_homogeneity
```

```{r}
p1 <- ggplot(data = amsterdam) +
  geom_point(aes(x = X, y = Y, colour = as.factor(km)), size = 0.5) +
  theme_void() 
p1
```

```{r}
p2 <- ggplot(data = amsterdam) +
  geom_point(aes(x = X, y = Y, colour = neigh_homogeneity), size = 0.5) +
  viridis::scale_color_viridis() +
  theme_void() 
p2
```

To understand how many clusters we can have, we can also plot the difference in variance and see for which number of cluster this decreases.

```{r}
set.seed(1)
ss <- NULL
for (i in 1:10) {
  km <- kmeans(x = polpol$delta, centers = i)
  ss[i] <- km$betweenss / km$totss
}

plot(x = 2:10, y = diff(ss))
```

So, at `k = 3` this decreases dramatically and then oscillates.
